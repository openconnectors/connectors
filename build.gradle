plugins {
	id "com.github.johnrengelman.shadow" version "2.0.1"
}

allprojects {

}

subprojects {

	def getVersionTag = { ->
    	def stdout = new ByteArrayOutputStream()
    		exec {
        		commandLine 'git', 'rev-list', 'HEAD', '--count'
        		standardOutput = stdout
    	}
    	return stdout.toString().trim()
	}

	apply plugin: 'java'
	apply plugin: 'maven'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

    group   = 'io.github.openconnectors'
    version = System.env['CONNECTOR_VERION'] ?: '0.0.' + getVersionTag()

	repositories {
		jcenter()
	}

	test {
		useTestNG()
	}

	dependencies {
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
		compile group: 'com.google.guava', name: 'guava', version: '23.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.0'
        compile group: 'com.typesafe', name: 'config', version: '1.3.1'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'

		testCompile group: 'org.testng', name: 'testng', version: '6.11'
		testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	// summarize artifacts
	artifacts {
	    archives jar
	    archives sourcesJar
	    archives javadocJar
	}

	apply plugin: 'com.github.johnrengelman.shadow'

 	shadowJar {
    	mergeServiceFiles {
      		include 'reference.conf'
    	}
	}

	task createPom {
		apply plugin: 'maven'
		description "Generates pom.xml"
		pom {
			project {
				url 'https://github.com/openconnectors/connectors'
				groupId project.group
				artifactId 'connector' + '-' + project.name
				version project.version
				packaging 'jar'
				name artifactId
				description "Open Connector component"
				inceptionYear '2017'
            	licenses {
                	license {
                    	name 'The Apache Software License, Version 2.0'
                    	url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    	distribution 'repo'
                	}
            	}
            	developers {
        			developer {
            			id 'Ali Ahmed'
            			email 'alahmed.se@gmail.com'
        			}
    			}
    			scm {
       				connection 'git@github.com:openconnectors/connectors.git'
        			url 'https://github.com/openconnectors/connectors'
    			}
			}
		}.writeTo("$buildDir/pom.xml")
	}

}

//Core
project(':core') {

}

//Pulsar
project(':pulsar') {
	dependencies {
		compile project(':core')
	}
}

//Kafka
project(':kafka010') {
	dependencies {
		compile project(':core')
	}
}

//JDBC
project(':jdbc') {
	dependencies {
		compile project(':core')
	}
}

//RabbitMQ
project(':rabbitmq') {
	dependencies {
		compile project(':core')
	}
}

//Twitter
project(':twitter') {
	dependencies {
		compile project(':core')
	}
}

//Aerospike
project(':aerospike') {
	dependencies {
		compile project(':core')
	}
}

//Cassandra
project(':cassandra') {
	dependencies {
		compile project(':core')
	}
}

//Elasticsearch
project(':elasticsearch5') {
	dependencies {
		compile project(':core')
	}
}

//S3
project(':s3') {
    dependencies {
        compile project(':core')
    }
}

//Examples local jvm
project(':examples') {
	dependencies {
		compile project(':core')
		compile project(':aerospike')
		compile project(':twitter')
		compile project(':cassandra')
		compile project(':kafka010')
		compile project(':pulsar')
	}
}
