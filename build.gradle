allprojects {

}

subprojects {

	def getVersionTag = { ->
    	def stdout = new ByteArrayOutputStream()
    		exec {
        		commandLine 'git', 'rev-list', 'HEAD', '--count'
        		standardOutput = stdout
    	}
    	return stdout.toString().trim()
	}

	apply plugin: 'java'
	apply plugin: 'maven'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

    group   = 'org.openconnectors.connectors'
    version = '0.0.' + getVersionTag()

	repositories {
		jcenter()
	}

	test {
		useTestNG()
	}

	dependencies {
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
		compile group: 'com.google.guava', name: 'guava', version: '23.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.0'
		compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.0'
        compile group: 'com.typesafe', name: 'config', version: '1.3.1'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'

		testCompile group: 'org.testng', name: 'testng', version: '6.11'
		testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	// summarize artifacts
	artifacts {
	    archives jar
	    archives sourcesJar
	    archives javadocJar
	}

	task fatJar(type: Jar) {
		baseName = project.name + '-uber'
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
		with jar
	}

	task createPom {
		apply plugin: 'maven'
		description "Generates pom.xml"
		pom {
			project {
				groupId project.group
				artifactId 'connector' + '-' + project.name
				version project.version
				packaging 'jar'
			}
		}.withXml {
			def dependenciesNode = asNode().appendNode('dependencies')
			configurations.compile.allDependencies.each { dependency ->
				def dependencyNode = dependenciesNode.appendNode('dependency')
				dependencyNode.appendNode('groupId', dependency.group)
				dependencyNode.appendNode('artifactId', dependency.name)
				dependencyNode.appendNode('version', dependency.version)

				// for exclusions
				if (dependency.excludeRules.size() > 0) {
					def exclusions = dependencyNode.appendNode('exclusions')
					dependency.excludeRules.each { ExcludeRule ex ->
						def exclusion = exclusions.appendNode('exclusion')
						exclusion.appendNode('groupId', ex.group)
						exclusion.appendNode('artifactId', ex.module)
					}
				}
			}
		}.writeTo("$buildDir/pom.xml")
	}

}

//Core
project(':core') {

}

//Heron Adapter
project(':heron-adapter') {
	dependencies {
		compile project(':core')
	}
}

//Pulsar
project(':pulsar') {
	dependencies {
		compile project(':core')
	}
}

//Kafka
project(':kafka') {
	dependencies {
		compile project(':core')
	}
}
